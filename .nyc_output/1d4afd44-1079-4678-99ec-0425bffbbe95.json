{"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/proteins.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/proteins.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":26}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":61},"end":{"line":21,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":19},"end":{"line":28,"column":5}},"line":26}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":9,"4":9,"5":16,"6":1},"f":{"0":9,"1":16},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/proteins.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/proteins.ts"],"names":[],"mappings":";;;AAAA,iCAAuD;AAEvD;;;GAGG;AACH,MAAa,QAAS,SAAQ,WAAI;IAChC;;;;;;;MAOE;IACF,YAAY,IAAY,EAAE,QAAgB,EAAE,cAA8B,EACtE,KAAa,EAAU,IAAe;QACxC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QADpB,SAAI,GAAJ,IAAI,CAAW;IAE1C,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AArBD,4BAqBC","sourcesContent":["import {Food, foodGroup, macroNutrients} from \"./food\";\r\n\r\n/**\r\n * La clase Proteins permite crear un objeto que represente\r\n * aquellos alimentos con alto contenido en proteinas.\r\n */\r\nexport class Proteins extends Food {\r\n  /**\r\n  * Constructor de la clase:\r\n  * @param name nombre del alimento\r\n  * @param origin localización origen del alimento\r\n  * @param macroNutrients información nutricional del alimento\r\n  * @param price precio del alimento por kilo\r\n  * @param type grupo de alimento al que pertenece\r\n  */\r\n  constructor(name: string, location: string, macroNutrients: macroNutrients,\r\n      price: number, private type: foodGroup) {\r\n    super(name, location, macroNutrients, price);\r\n  }\r\n\r\n  /**\r\n   * Método que devolverá el grupo de alimento al que pertenece\r\n   * @returns devolverá el grupo Proteins\r\n   */\r\n  getFoodGroup(): foodGroup {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c0e017d5ec3efab41e7dc02502e887c74c837032","contentHash":"f87edd52198176a4b682636add02448fb81ef2d4d0bd813d5354cfb4d478ebfd"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/food.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/food.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":16,"column":8},"end":{"line":16,"column":25}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":33}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":45}},"5":{"start":{"line":19,"column":8},"end":{"line":19,"column":27}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":25}},"7":{"start":{"line":33,"column":8},"end":{"line":33,"column":29}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":35}},"9":{"start":{"line":47,"column":8},"end":{"line":47,"column":26}},"10":{"start":{"line":54,"column":8},"end":{"line":54,"column":25}},"11":{"start":{"line":61,"column":8},"end":{"line":61,"column":33}},"12":{"start":{"line":68,"column":8},"end":{"line":68,"column":40}},"13":{"start":{"line":75,"column":8},"end":{"line":75,"column":27}},"14":{"start":{"line":78,"column":0},"end":{"line":78,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":55},"end":{"line":20,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":14},"end":{"line":27,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":18},"end":{"line":34,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":24},"end":{"line":41,"column":5}},"line":39},"4":{"name":"(anonymous_4)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":15},"end":{"line":48,"column":5}},"line":46},"5":{"name":"(anonymous_5)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":18},"end":{"line":55,"column":5}},"line":53},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":26},"end":{"line":62,"column":5}},"line":60},"7":{"name":"(anonymous_7)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":33},"end":{"line":69,"column":5}},"line":67},"8":{"name":"(anonymous_8)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":20},"end":{"line":76,"column":5}},"line":74}},"branchMap":{},"s":{"0":1,"1":1,"2":39,"3":39,"4":39,"5":39,"6":22,"7":6,"8":6,"9":78,"10":1,"11":1,"12":1,"13":1,"14":1},"f":{"0":39,"1":22,"2":6,"3":6,"4":78,"5":1,"6":1,"7":1,"8":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/food.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/food.ts"],"names":[],"mappings":";;;AAgCA;;GAEG;AACH,MAAsB,IAAI;IACxB;;;;;;OAMG;IACH,YAAsB,IAAY,EAAY,QAAgB,EACjD,cAA8B,EAAY,KAAa;QAD9C,SAAI,GAAJ,IAAI,CAAQ;QAAY,aAAQ,GAAR,QAAQ,CAAQ;QACjD,mBAAc,GAAd,cAAc,CAAgB;QAAY,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAExE;;;OAGG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,QAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,iBAAiB,CAAC,SAAyB;QACzC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CAMF;AA/ED,oBA+EC","sourcesContent":["/**\r\n * Contiene un tipo definido por la estructura de datos `type` que representa \r\n * los grupos de alimentos existentes. Puede ser Proteins (proteinas), Vegetables (vegetales), \r\n * Dairy (lacteaos), Cereals (cereales) y Fruits (frutas).\r\n */\r\nexport type foodGroup = 'Proteins'|'Vegetables'|'Dairy'|'Cereals'|'Fruits';\r\n\r\n/**\r\n * Contiene un tipo definido por la estructura de datos `type` que representa\r\n * la composición nutricional de un alimento. Dispone de 3 atributos:\r\n * - carboHydrates: Carbohidratos del alimento\r\n * - proteins: Proteinas del alimento\r\n * - lipids: Lípidos del alimento\r\n */\r\nexport type macroNutrients = {\r\n    carboHydrates: number,\r\n    proteins: number,\r\n    lipids: number\r\n}\r\n\r\n/**\r\n *  Contiene un tipo definido por la estructura de datos `type` que representa un alimento \r\n *  (Dispone de 5 atributos)\r\n */\r\nexport type FoodType = {\r\n  name: string;\r\n  location: string;\r\n  macroNutrients: macroNutrients;\r\n  price: number;\r\n  type: foodGroup;\r\n}\r\n\r\n/**\r\n * Clase abstracta que almacena información relacionado con un alimento\r\n */\r\nexport abstract class Food {\r\n  /**\r\n   * Constructor de la clase:\r\n   * @param name Nombre del alimento\r\n   * @param location Lugar de procedencia del alimento\r\n   * @param macroNutrients Composición nutricional del alimento\r\n   * @param price Precio del alimento por kg\r\n   */\r\n  constructor(protected name: string, protected location: string,\r\n        public macroNutrients: macroNutrients, protected price: number) {}\r\n\r\n  /**\r\n   * Método que retorna el nombre del alimento\r\n   * @returns Nombre del alimento \r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Método que retorna el lugar de procedencia del alimento\r\n   * @returns Lugar de procedencia del alimento\r\n   */\r\n  getLocation() : string {\r\n    return this.location;\r\n  }\r\n\r\n  /**\r\n   * Método que devuelve la composición nutricional del alimento\r\n   * @returns Composición nutricional del alimento\r\n   */\r\n  getMacroNutrients(): macroNutrients {\r\n    return this.macroNutrients;\r\n  }\r\n\r\n  /**\r\n   * Método que devuelve el precio del alimento\r\n   * @returns Precio del alimento \r\n   */\r\n  getPrice(): number {\r\n    return this.price;\r\n  }\r\n\r\n  /**\r\n   * Método que asigna un nombre a un alimento \r\n   * @param name Nombre a asignar\r\n   */\r\n  setName(name: string): void {\r\n    this.name = name;\r\n  }\r\n\r\n  /**\r\n   * Método que asigna el lugar de procedencia a un alimento \r\n   * @param location Lugar de procedencia a asignar\r\n   */\r\n  setLocation(location: string): void {\r\n    this.location = location;\r\n  }\r\n\r\n  /**\r\n   * Método que asigna la composición nutricional a un alimento \r\n   * @param nutrients Composición nutricional a asignar\r\n   */\r\n  setMacroNutrients(nutrients: macroNutrients): void {\r\n    this.macroNutrients = nutrients;\r\n  }\r\n\r\n  /**\r\n   * Método que asigna el precio a un alimento \r\n   * @param price Precio a asignar \r\n   */\r\n  setPrice(price: number): void {\r\n    this.price = price;\r\n  }\r\n\r\n  /**\r\n   * Método abstracto que devolverá el grupo de alimento al que pertenece \r\n   */\r\n  abstract getFoodGroup(): foodGroup;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8efb11d2f980519aaa09b4abfdf13187d6e64e84","contentHash":"13781671b3792c5670d487feed3d5b023b14a578cb7a89317ed94f265b7254aa"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/vegetables.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/vegetables.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":61},"end":{"line":21,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":19},"end":{"line":28,"column":5}},"line":26}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":8,"4":8,"5":20,"6":1},"f":{"0":8,"1":20},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/vegetables.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/vegetables.ts"],"names":[],"mappings":";;;AAAA,iCAAuD;AAEvD;;;GAGG;AACH,MAAa,UAAW,SAAQ,WAAI;IAClC;;;;;;;MAOE;IACF,YAAY,IAAY,EAAE,QAAgB,EAAE,cAA8B,EACtE,KAAa,EAAY,IAAe;QAC1C,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QADlB,SAAI,GAAJ,IAAI,CAAW;IAE5C,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AArBD,gCAqBC","sourcesContent":["import {Food, foodGroup, macroNutrients} from \"./food\";\r\n\r\n/**\r\n * La clase Vegetables permite crear un objeto que represente\r\n * aquellos alimentos que pertenezcan a los vegetales.\r\n */\r\nexport class Vegetables extends Food {\r\n  /**\r\n    * Constructor de la clase:\r\n    * @param name nombre del alimento\r\n    * @param origin localización origen del alimento\r\n    * @param macroNutrients información nutricional del alimento\r\n    * @param price precio del alimento por kilo\r\n    * @param type grupo de alimento al que pertenece\r\n  */\r\n  constructor(name: string, location: string, macroNutrients: macroNutrients,\r\n      price: number, protected type: foodGroup) {\r\n    super(name, location, macroNutrients, price);\r\n  }\r\n\r\n  /**\r\n   * Método que devolverá el grupo de alimento al que pertenece\r\n   * @returns devolverá el grupo Vegetables\r\n   */\r\n  getFoodGroup(): foodGroup {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"03924bde119a102acf0ff7008a90999a41ba3496","contentHash":"f213c26655572a70c86e38496105470ca43489d04aa25e46faff5b540bc78196"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/dairy.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/dairy.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":61},"end":{"line":21,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":19},"end":{"line":28,"column":5}},"line":26}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":8,"4":8,"5":12,"6":1},"f":{"0":8,"1":12},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/dairy.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/dairy.ts"],"names":[],"mappings":";;;AAAA,iCAAuD;AAEvD;;;GAGG;AACH,MAAa,KAAM,SAAQ,WAAI;IAC7B;;;;;;;MAOE;IACF,YAAY,IAAY,EAAE,QAAgB,EAAE,cAA8B,EACtE,KAAa,EAAU,IAAe;QACxC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QADpB,SAAI,GAAJ,IAAI,CAAW;IAE1C,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AArBD,sBAqBC","sourcesContent":["import {Food, foodGroup, macroNutrients} from \"./food\";\r\n\r\n/**\r\n * La clase Dairy permite crear un objeto que represente\r\n * aquellos alimentos que pertenezcan a los lácteos.\r\n */\r\nexport class Dairy extends Food {\r\n  /**\r\n    * Constructor de la clase:\r\n    * @param name nombre del alimento\r\n    * @param origin localización origen del alimento\r\n    * @param macroNutrients información nutricional del alimento\r\n    * @param price precio del alimento por kilo\r\n    * @param type grupo de alimento al que pertenece\r\n  */\r\n  constructor(name: string, location: string, macroNutrients: macroNutrients,\r\n      price: number, private type: foodGroup) {\r\n    super(name, location, macroNutrients, price);\r\n  }\r\n\r\n  /**\r\n   * Método que devolverá el grupo de alimento al que pertenece\r\n   * @returns devolverá el grupo Dairy\r\n   */\r\n  getFoodGroup(): foodGroup {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"968c8e57e45cdee642331ead16a86b47fa4f2bb4","contentHash":"662a758b1e118d081aeb71da361a220425714b9b01b9f2b7e1951d9d460047d4"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/cereals.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/cereals.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":25}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":51}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":59},"end":{"line":21,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":19},"end":{"line":28,"column":5}},"line":26}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":4,"4":4,"5":13,"6":1},"f":{"0":4,"1":13},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/cereals.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/cereals.ts"],"names":[],"mappings":";;;AAAA,iCAAuD;AAEvD;;;GAGG;AACH,MAAa,OAAQ,SAAQ,WAAI;IAC/B;;;;;;;MAOE;IACF,YAAY,IAAY,EAAE,MAAc,EAAE,cAA8B,EACpE,KAAa,EAAU,IAAe;QACxC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QADlB,SAAI,GAAJ,IAAI,CAAW;IAE1C,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AArBD,0BAqBC","sourcesContent":["import {Food, foodGroup, macroNutrients} from \"./food\";\r\n\r\n/**\r\n * La clase Cereals permite crear un objeto que represente\r\n * aquellos alimentos que esten compuestos de cereales.\r\n */\r\nexport class Cereals extends Food {\r\n  /**\r\n    * Constructor de la clase:\r\n    * @param name nombre del alimento\r\n    * @param origin localización origen del alimento\r\n    * @param macroNutrients información nutricional del alimento\r\n    * @param price precio del alimento por kilo\r\n    * @param type grupo de alimento al que pertenece\r\n  */\r\n  constructor(name: string, origin: string, macroNutrients: macroNutrients,\r\n      price: number, private type: foodGroup) {\r\n    super(name, origin, macroNutrients, price);\r\n  }\r\n\r\n  /**\r\n   * Método que devolverá el grupo de alimento al que pertenece\r\n   * @returns devolverá el grupo Cereals\r\n   */\r\n  getFoodGroup(): foodGroup {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a409b7045c5e7d4a756d8efbe2177fa4d29dd522","contentHash":"4304202d50b7d180e199c65fd0472a54f5f715d8fbbe602ec8f62880ce377981"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/fruits.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/fruits.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":24}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":32}},"3":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"4":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":25}},"6":{"start":{"line":30,"column":0},"end":{"line":30,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":61},"end":{"line":21,"column":5}},"line":18},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":19},"end":{"line":28,"column":5}},"line":26}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":10,"4":10,"5":16,"6":1},"f":{"0":10,"1":16},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/fruits.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/food/fruits.ts"],"names":[],"mappings":";;;AAAA,iCAAuD;AAEvD;;;GAGG;AACH,MAAa,MAAO,SAAQ,WAAI;IAC9B;;;;;;;MAOE;IACF,YAAY,IAAY,EAAE,QAAgB,EAAE,cAA8B,EACtE,KAAa,EAAU,IAAe;QACxC,KAAK,CAAC,IAAI,EAAE,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QADpB,SAAI,GAAJ,IAAI,CAAW;IAE1C,CAAC;IAED;;;OAGG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AArBD,wBAqBC","sourcesContent":["import {Food, foodGroup, macroNutrients} from './food';\r\n\r\n/**\r\n * La clase Fruits permite crear un objeto que represente\r\n * aquellos alimentos pertenecientes a las frutas.\r\n */\r\nexport class Fruits extends Food {\r\n  /**\r\n    * Constructor de la clase:\r\n    * @param name nombre del alimento\r\n    * @param origin localización origen del alimento\r\n    * @param macroNutrients información nutricional del alimento\r\n    * @param price precio del alimento por kilo\r\n    * @param type grupo de alimento al que pertenece\r\n  */\r\n  constructor(name: string, location: string, macroNutrients: macroNutrients,\r\n      price: number, private type: foodGroup) {\r\n    super(name, location, macroNutrients, price);\r\n  }\r\n\r\n  /**\r\n   * Método que devolverá el grupo de alimento al que pertenece\r\n   * @returns devolverá el grupo Fruits\r\n   */\r\n  getFoodGroup(): foodGroup {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bfe9f580318e99d38ffcb44e04d8fb61b83ba7ba","contentHash":"673c12408a7193fb020619e5dbc6708cbf7c1e679b0eb3397e0a710cee9c55fd"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/dessertPlate.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/dessertPlate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":26}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":34},"end":{"line":19,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":23},"end":{"line":26,"column":5}},"line":24}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":6,"4":6,"5":6,"6":1},"f":{"0":6,"1":6},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/dessertPlate.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/dessertPlate.ts"],"names":[],"mappings":";;;AAAA,mCAA2D;AAE3D;;;GAGG;AACH,MAAa,YAAa,SAAQ,aAAK;IACrC;;;;;OAKG;IACH,YAAY,IAAY,EAAE,IAAoB,EAAY,IAAmB;QAC3E,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QADsC,SAAI,GAAJ,IAAI,CAAe;IAE7E,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAlBD,oCAkBC","sourcesContent":["import {Plate, plateCategory, foodInPlates} from \"./plate\";\r\n\r\n/**\r\n * Subclase que extiende de la clase padre plate que permite crear un objeto \r\n * que represente aquellos platos reconocidos como postre\r\n */\r\nexport class DessertPlate extends Plate {\r\n  /**\r\n   * Constructor de la clase:\r\n   * @param name Nombre del plato\r\n   * @param food Alimentos que componen el plato\r\n   * @param type Tipo de plato al que pertenece (Dessert)\r\n   */\r\n  constructor(name: string, food: foodInPlates[], protected type: plateCategory) {\r\n    super(name, food);\r\n  }\r\n\r\n  /**\r\n   * Método que devuelve el tipo al que pertenece el plato\r\n   * @returns Tipo al que pertenece el plato\r\n   */\r\n  getPlateCategory(): plateCategory {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e86bbb2d2420939a80321fa5e1d50046df8980cd","contentHash":"55abbef58051655b25197cceaffd4d810e847b0d256f0be3c49cfd1de5b64a7c"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/plate.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/plate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":20,"column":8},"end":{"line":20,"column":25}},"3":{"start":{"line":21,"column":8},"end":{"line":21,"column":30}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":80}},"5":{"start":{"line":22,"column":34},"end":{"line":22,"column":78}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":60}},"7":{"start":{"line":24,"column":8},"end":{"line":24,"column":53}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":43}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":36}},"10":{"start":{"line":40,"column":23},"end":{"line":44,"column":9}},"11":{"start":{"line":45,"column":8},"end":{"line":49,"column":11}},"12":{"start":{"line":46,"column":12},"end":{"line":46,"column":86}},"13":{"start":{"line":47,"column":12},"end":{"line":47,"column":76}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":72}},"15":{"start":{"line":50,"column":8},"end":{"line":50,"column":22}},"16":{"start":{"line":60,"column":24},"end":{"line":60,"column":33}},"17":{"start":{"line":62,"column":8},"end":{"line":70,"column":11}},"18":{"start":{"line":63,"column":12},"end":{"line":63,"column":43}},"19":{"start":{"line":64,"column":12},"end":{"line":69,"column":13}},"20":{"start":{"line":65,"column":16},"end":{"line":65,"column":67}},"21":{"start":{"line":68,"column":16},"end":{"line":68,"column":38}},"22":{"start":{"line":71,"column":18},"end":{"line":71,"column":42}},"23":{"start":{"line":72,"column":23},"end":{"line":72,"column":45}},"24":{"start":{"line":73,"column":8},"end":{"line":78,"column":11}},"25":{"start":{"line":74,"column":12},"end":{"line":77,"column":13}},"26":{"start":{"line":75,"column":16},"end":{"line":75,"column":29}},"27":{"start":{"line":76,"column":16},"end":{"line":76,"column":33}},"28":{"start":{"line":79,"column":8},"end":{"line":79,"column":24}},"29":{"start":{"line":88,"column":21},"end":{"line":88,"column":22}},"30":{"start":{"line":89,"column":8},"end":{"line":91,"column":11}},"31":{"start":{"line":90,"column":12},"end":{"line":90,"column":55}},"32":{"start":{"line":92,"column":8},"end":{"line":92,"column":22}},"33":{"start":{"line":100,"column":8},"end":{"line":100,"column":41}},"34":{"start":{"line":101,"column":8},"end":{"line":101,"column":60}},"35":{"start":{"line":102,"column":8},"end":{"line":102,"column":53}},"36":{"start":{"line":103,"column":8},"end":{"line":103,"column":43}},"37":{"start":{"line":110,"column":8},"end":{"line":110,"column":39}},"38":{"start":{"line":111,"column":8},"end":{"line":111,"column":60}},"39":{"start":{"line":112,"column":8},"end":{"line":112,"column":53}},"40":{"start":{"line":113,"column":8},"end":{"line":113,"column":43}},"41":{"start":{"line":120,"column":8},"end":{"line":120,"column":25}},"42":{"start":{"line":127,"column":8},"end":{"line":127,"column":39}},"43":{"start":{"line":134,"column":8},"end":{"line":134,"column":37}},"44":{"start":{"line":141,"column":8},"end":{"line":141,"column":26}},"45":{"start":{"line":148,"column":8},"end":{"line":148,"column":35}},"46":{"start":{"line":155,"column":8},"end":{"line":155,"column":30}},"47":{"start":{"line":162,"column":21},"end":{"line":162,"column":37}},"48":{"start":{"line":163,"column":8},"end":{"line":163,"column":51}},"49":{"start":{"line":164,"column":8},"end":{"line":164,"column":39}},"50":{"start":{"line":165,"column":8},"end":{"line":167,"column":11}},"51":{"start":{"line":166,"column":12},"end":{"line":166,"column":54}},"52":{"start":{"line":168,"column":8},"end":{"line":171,"column":70}},"53":{"start":{"line":172,"column":8},"end":{"line":172,"column":88}},"54":{"start":{"line":173,"column":8},"end":{"line":173,"column":22}},"55":{"start":{"line":176,"column":0},"end":{"line":176,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":28},"end":{"line":26,"column":5}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":21},"end":{"line":22,"column":22}},"loc":{"start":{"line":22,"column":34},"end":{"line":22,"column":78}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":34},"end":{"line":34,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":29},"end":{"line":51,"column":5}},"line":39},"4":{"name":"(anonymous_4)","decl":{"start":{"line":45,"column":26},"end":{"line":45,"column":27}},"loc":{"start":{"line":45,"column":43},"end":{"line":49,"column":9}},"line":45},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":27},"end":{"line":80,"column":5}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":38},"end":{"line":62,"column":39}},"loc":{"start":{"line":62,"column":51},"end":{"line":70,"column":9}},"line":62},"7":{"name":"(anonymous_7)","decl":{"start":{"line":73,"column":24},"end":{"line":73,"column":25}},"loc":{"start":{"line":73,"column":49},"end":{"line":78,"column":9}},"line":73},"8":{"name":"(anonymous_8)","decl":{"start":{"line":87,"column":4},"end":{"line":87,"column":5}},"loc":{"start":{"line":87,"column":21},"end":{"line":93,"column":5}},"line":87},"9":{"name":"(anonymous_9)","decl":{"start":{"line":89,"column":26},"end":{"line":89,"column":27}},"loc":{"start":{"line":89,"column":49},"end":{"line":91,"column":9}},"line":89},"10":{"name":"(anonymous_10)","decl":{"start":{"line":99,"column":4},"end":{"line":99,"column":5}},"loc":{"start":{"line":99,"column":31},"end":{"line":104,"column":5}},"line":99},"11":{"name":"(anonymous_11)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":29},"end":{"line":114,"column":5}},"line":109},"12":{"name":"(anonymous_12)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":14},"end":{"line":121,"column":5}},"line":119},"13":{"name":"(anonymous_13)","decl":{"start":{"line":126,"column":4},"end":{"line":126,"column":5}},"loc":{"start":{"line":126,"column":16},"end":{"line":128,"column":5}},"line":126},"14":{"name":"(anonymous_14)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":14},"end":{"line":135,"column":5}},"line":133},"15":{"name":"(anonymous_15)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":15},"end":{"line":142,"column":5}},"line":140},"16":{"name":"(anonymous_16)","decl":{"start":{"line":147,"column":4},"end":{"line":147,"column":5}},"loc":{"start":{"line":147,"column":32},"end":{"line":149,"column":5}},"line":147},"17":{"name":"(anonymous_17)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":30},"end":{"line":156,"column":5}},"line":154},"18":{"name":"(anonymous_18)","decl":{"start":{"line":161,"column":4},"end":{"line":161,"column":5}},"loc":{"start":{"line":161,"column":17},"end":{"line":174,"column":5}},"line":161},"19":{"name":"(anonymous_19)","decl":{"start":{"line":165,"column":26},"end":{"line":165,"column":27}},"loc":{"start":{"line":165,"column":49},"end":{"line":167,"column":9}},"line":165}},"branchMap":{"0":{"loc":{"start":{"line":64,"column":12},"end":{"line":69,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":69,"column":13}},{"start":{"line":64,"column":12},"end":{"line":69,"column":13}}],"line":64},"1":{"loc":{"start":{"line":74,"column":12},"end":{"line":77,"column":13}},"type":"if","locations":[{"start":{"line":74,"column":12},"end":{"line":77,"column":13}},{"start":{"line":74,"column":12},"end":{"line":77,"column":13}}],"line":74}},"s":{"0":1,"1":1,"2":25,"3":25,"4":25,"5":68,"6":25,"7":25,"8":25,"9":68,"10":27,"11":27,"12":72,"13":72,"14":72,"15":27,"16":27,"17":27,"18":72,"19":72,"20":17,"21":55,"22":27,"23":27,"24":27,"25":55,"26":1,"27":1,"28":27,"29":27,"30":27,"31":72,"32":27,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":20,"42":1,"43":6,"44":26,"45":70,"46":11,"47":2,"48":2,"49":2,"50":2,"51":6,"52":2,"53":2,"54":2,"55":1},"f":{"0":25,"1":68,"2":68,"3":27,"4":72,"5":27,"6":72,"7":55,"8":27,"9":72,"10":1,"11":1,"12":20,"13":1,"14":6,"15":26,"16":70,"17":11,"18":2,"19":6},"b":{"0":[17,55],"1":[1,54]},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/plate.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/plate.ts"],"names":[],"mappings":";;;AAmCA;;;;;;;;GAQG;AACH,MAAsB,KAAK;IAMzB;;;;OAIG;IACH,YAAsB,IAAY,EAAE,IAAoB;QAAlC,SAAI,GAAJ,IAAI,CAAQ;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,EAAgB,CAAC;QACpC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,IAAU,EAAE,MAAc;QACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACK,sBAAsB;QAC5B,MAAM,MAAM,GAAmB;YAC7B,aAAa,EAAE,CAAC;YAChB,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE,CAAC;SACV,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,IAAU,EAAE,EAAE;YAC9C,MAAM,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;YAC1E,MAAM,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;YAChE,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;OAMG;IACK,oBAAoB;QAC1B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAqB,CAAC;QAC7C,IAAI,KAAgB,CAAC;QAErB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACxC,KAAK,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;YAC/B,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACtB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACpD;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aACvB;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,GAAG,GAAW,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,IAAI,QAAQ,GAAc,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,OAAO,CAAC,OAAO,CAAC,UAAS,MAAc,EAAE,KAAgB;YACvD,IAAI,MAAM,GAAG,GAAG,EAAE;gBAChB,GAAG,GAAG,MAAM,CAAC;gBACb,QAAQ,GAAG,KAAK,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACK,cAAc;QACpB,IAAI,MAAM,GAAW,CAAC,CAAC;QACvB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAS,KAAa,EAAE,IAAU;YAClD,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,SAAe,EAAE,MAAc;QACrC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,UAAU,CAAC,YAAkB;QAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC7C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,OAAO;QACL,OAAO,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,yBAAyB;QACvB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,uBAAuB;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,UAAU;QACR,IAAI,MAAM,GAAW,IAAI,CAAC,IAAI,GAAE,IAAI,CAAC;QACrC,MAAM,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAC3C,MAAM,IAAI,oBAAoB,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAS,KAAa,EAAE,IAAU;YAClD,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;QAC5C,CAAC,CAAC,CAAC;QACH,MAAM,IAAI,8BAA8B;YACxC,wBAAwB,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa;YAC5D,iBAAiB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM;YAC9C,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC1D,MAAM,IAAG,6BAA6B,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAC,IAAI,CAAC;QAE7E,OAAO,MAAM,CAAC;IAChB,CAAC;CAOF;AA9LD,sBA8LC","sourcesContent":["import {Food, macroNutrients, foodGroup} from \"../food/food\";\r\n\r\n/**\r\n * Tipo de dato definido para definir el tipo de plato.\r\n * Puede ser entrante (starter), primer plato (first),\r\n * second (segundo plato) y postre (dessert)\r\n */\r\nexport type plateCategory = 'Starter' | 'First' | 'Second' | 'Dessert';\r\n\r\n/**\r\n * Tipo de dato definido para representar los alimentos\r\n * y sus cantidades en un plato. Se ha definido como una tupla\r\n * que recibe el alimento y la cantidad del mismo.\r\n */\r\nexport type foodInPlates = [Food, number];\r\n\r\n/**\r\n * Tipo de dato que define la informacion de un plato.\r\n * @param name contiene el nombre del plato\r\n * @param macroNutrients macronutrientes del plato\r\n * @param price precio del plato\r\n * @param food array de alimentos que conforman el plato\r\n * @param amount array de cantidades de los alimentos\r\n * @param type tipo de plato (entrante, primero, segundo, postre)\r\n */\r\nexport type PlateType = {\r\n  name: string;\r\n  macroNutrients: macroNutrients;\r\n  groupFood: foodGroup;\r\n  price: number;\r\n  food: string[];\r\n  amount: number[];\r\n  type: plateCategory;\r\n}\r\n\r\n/**\r\n * La clase abstracta Plate permitirá definir platos en los que se podrán\r\n * añadir alimentos. Las clases que hereden de ésta podrán diferenciarse gracias al\r\n * tipo de plato.\r\n * @param macroNutrients macronutrientes del plato\r\n * @param groupFood grupo de alimentos predominante en el plato\r\n * @param price precio del plato\r\n * @param food alimentos del plato junto con la cantidad usada de cada alimento.\r\n */\r\nexport abstract class Plate {\r\n  protected macroNutrients: macroNutrients;\r\n  protected groupFood: foodGroup;\r\n  protected price: number;\r\n  protected food: Map<Food, number>;\r\n\r\n  /**\r\n   * Constructor de la clase abstracta plate, permitirá crear un plato.\r\n   * @param name nombre del plato\r\n   * @param food alimentos que conforman el plato junto a sus cantidades.\r\n   */\r\n  constructor(protected name: string, food: foodInPlates[]) {\r\n    this.food = new Map<Food, number>();\r\n    food.forEach((element) => this.addFoodInPlates(element[0], element[1]));\r\n    this.macroNutrients = this.nutritionalComposition();\r\n    this.groupFood = this.predominantGroupFood();\r\n    this.price = this.calculatePrice();\r\n  }\r\n\r\n  /**\r\n   * Método que permite agregar alimentos al plato\r\n   * @param food alimento a añadir\r\n   * @param amount cantidad del alimento a añadir\r\n   */\r\n  addFoodInPlates(food: Food, amount: number) {\r\n    this.food.set(food, amount);\r\n  }\r\n\r\n  /**\r\n   * Método que registrará la información nutricional del plato\r\n   * @returns macronutrientes del plato.\r\n   */\r\n  private nutritionalComposition(): macroNutrients {\r\n    const result: macroNutrients = {\r\n      carboHydrates: 0,\r\n      proteins: 0,\r\n      lipids: 0,\r\n    };\r\n\r\n    this.food.forEach((value: number, keys: Food) => {\r\n      result.carboHydrates += (keys.macroNutrients.carboHydrates / 100) * value;\r\n      result.proteins += (keys.macroNutrients.proteins / 100) * value;\r\n      result.lipids += (keys.macroNutrients.lipids / 100) * value;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Método que devuelve el grupo de alimentos\r\n   * predominante en el plato. En caso de que no haya\r\n   * ninguno que predomine, se eligirá el grupo de alimento\r\n   * del primer elemento del array de alimentos.\r\n   * @returns grupo de alimentos predominante en el plato.\r\n   */\r\n  private predominantGroupFood(): foodGroup {\r\n    const counter = new Map<foodGroup, number>();\r\n    let group: foodGroup;\r\n\r\n    [...this.food.keys()].forEach((element) => {\r\n      group = element.getFoodGroup();\r\n      if (counter.has(group)) {\r\n        counter.set(group, Number(counter.get(group)) + 1);\r\n      } else {\r\n        counter.set(group, 0);\r\n      }\r\n    });\r\n\r\n    let max: number = [...counter.values()][0];\r\n    let maxGroup: foodGroup = [...counter.keys()][0];\r\n    counter.forEach(function(amount: number, group: foodGroup) {\r\n      if (amount > max) {\r\n        max = amount;\r\n        maxGroup = group;\r\n      }\r\n    });\r\n\r\n    return maxGroup;\r\n  }\r\n\r\n  /**\r\n   * Método que se encargará de calcular el precio del plato.\r\n   * Lo calculará en base a la cantidad del alimento y al precio\r\n   * por kilo de cada uno.\r\n   * @returns el precio total del plato.\r\n   */\r\n  private calculatePrice(): number {\r\n    let result: number = 0;\r\n    this.food.forEach(function(value: number, keys: Food) {\r\n      result += (keys.getPrice() / 1000) * value;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Método que permitirá añadir más alimentos al plato\r\n   * @param foodToAdd alimento a añadir\r\n   * @param amount cantidad del alimento a añadir\r\n   */\r\n  addFood(foodToAdd: Food, amount: number): void {\r\n    this.food.set(foodToAdd, amount);\r\n    this.macroNutrients = this.nutritionalComposition();\r\n    this.groupFood = this.predominantGroupFood();\r\n    this.price = this.calculatePrice();\r\n  }\r\n\r\n  /**\r\n   * Método que eliminará alimentos del plato.\r\n   * @param foodToDelete alimento a eliminar\r\n   */\r\n  deleteFood(foodToDelete: Food): void {\r\n    this.food.delete(foodToDelete);\r\n    this.macroNutrients = this.nutritionalComposition();\r\n    this.groupFood = this.predominantGroupFood();\r\n    this.price = this.calculatePrice();\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve el nombre del plato\r\n   * @returns nombre del plato\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve las cantidades de los alimentos.\r\n   * @returns cantidades de los alimentos del plato.\r\n   */\r\n  getNumber(): number[] {\r\n    return [...this.food.values()];\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve los alimentos del plato.\r\n   * @returns alimentos que conforman el plato.\r\n   */\r\n  getFood(): Food[] {\r\n    return [...this.food.keys()];\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve el precio del plato\r\n   * @returns precio total del plato\r\n   */\r\n  getPrice(): number {\r\n    return this.price;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve los macronutrientes del plato.\r\n   * @returns la información nutricional del plato.\r\n   */\r\n  getNutritionalComposition(): macroNutrients {\r\n    return this.macroNutrients;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devolverá el grupo de alimentos predominante\r\n   * @returns el grupo de alimentos que predomine en el plato.\r\n   */\r\n  getPredominantGroupFood(): foodGroup {\r\n    return this.groupFood;\r\n  }\r\n\r\n  /**\r\n   * Método que permitirá imprimir la información del plato.\r\n   * @returns devuelve un string con la información del plato.\r\n   */\r\n  printPlate() {\r\n    let result: string = this.name +'\\n';\r\n    result += ' - Price: ' + this.price + '\\n';\r\n    result += ' - Ingredients: \\n';\r\n    this.food.forEach(function(value: number, keys: Food) {\r\n      result += '   * ' + keys.getName() + '\\n';\r\n    });\r\n    result += ' - Nutritional composition: ' +\r\n    '\\n   * Carbohydrates: ' + this.macroNutrients.carboHydrates +\r\n    '\\n   * Lipids: ' + this.macroNutrients.lipids +\r\n    '\\n   * Proteins: ' + this.macroNutrients.proteins + '\\n';\r\n    result +=' - Predominant food group: ' + this.getPredominantGroupFood()+'\\n';\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n * Método abstracto que permitirá a las clases que hereden diferenciarse entre sí\r\n * por categorías : Starter, First, Second y Dessert.\r\n */\r\n  abstract getPlateCategory(): plateCategory;\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b8f3e0aa23070388fdbe1f7ea23779c3dae8ab04","contentHash":"e84d8974487efa29777c5daff94ffc80bcd49a9780961fbd9818af9711e4aaa5"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/firstPlate.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/firstPlate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":26}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":34},"end":{"line":19,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":23},"end":{"line":26,"column":5}},"line":24}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":7,"4":7,"5":8,"6":1},"f":{"0":7,"1":8},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/firstPlate.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/firstPlate.ts"],"names":[],"mappings":";;;AAAA,mCAA2D;AAE3D;;;GAGG;AACH,MAAa,UAAW,SAAQ,aAAK;IACnC;;;;;OAKG;IACH,YAAY,IAAY,EAAE,IAAoB,EAAY,IAAmB;QAC3E,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QADsC,SAAI,GAAJ,IAAI,CAAe;IAE7E,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAlBD,gCAkBC","sourcesContent":["import {Plate, plateCategory, foodInPlates} from \"./plate\";\r\n\r\n/**\r\n * Subclase que extiende de la clase padre plate que permite crear un objeto \r\n * que represente aquellos platos reconocidos como primer plato\r\n */\r\nexport class FirstPlate extends Plate {\r\n  /**\r\n   * Constructor de la clase: \r\n   * @param name Nombre del plato \r\n   * @param food Alimentos que componen el plato\r\n   * @param type Tipo de plato al que pertenece (First)\r\n   */\r\n  constructor(name: string, food: foodInPlates[], protected type: plateCategory) {\r\n    super(name, food);\r\n  }\r\n\r\n  /**\r\n   * Método que devuelve el tipo al que pertenece el plato\r\n   * @returns Tipo al que pertenece el plato\r\n   */\r\n  getPlateCategory(): plateCategory {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b768af1fd3983c00cf97dd52c1b02ed694ec3521","contentHash":"a825caf586286276143aa6cde6bc975cc205a17fe06e76f45669bad1463db67e"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/secondPlate.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/secondPlate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":26}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":34},"end":{"line":19,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":23},"end":{"line":26,"column":5}},"line":24}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":5,"4":5,"5":8,"6":1},"f":{"0":5,"1":8},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/secondPlate.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/secondPlate.ts"],"names":[],"mappings":";;;AAAA,mCAA2D;AAE3D;;;GAGG;AACH,MAAa,WAAY,SAAQ,aAAK;IACpC;;;;;OAKG;IACH,YAAY,IAAY,EAAE,IAAoB,EAAY,IAAmB;QAC3E,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QADsC,SAAI,GAAJ,IAAI,CAAe;IAE7E,CAAC;IAEA;;;MAGE;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAlBD,kCAkBC","sourcesContent":["import {Plate, plateCategory, foodInPlates} from \"./plate\";\r\n\r\n/**\r\n * Subclase que extiende de la clase padre plate que permite crear un objeto \r\n * que represente aquellos platos reconocidos como segundo plato\r\n */\r\nexport class SecondPlate extends Plate {\r\n  /**\r\n   * Constructor de la clase: \r\n   * @param name Nombre del plato \r\n   * @param food Alimentos que componen el plato\r\n   * @param type Tipo de plato al que pertenece (Second)\r\n   */\r\n  constructor(name: string, food: foodInPlates[], protected type: plateCategory) {\r\n    super(name, food);\r\n  }\r\n\r\n   /**\r\n   * Método que devuelve el tipo al que pertenece el plato\r\n   * @returns Tipo al que pertenece el plato\r\n   */\r\n  getPlateCategory(): plateCategory {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c329088cc7bbe4384e1e23648f7a46d8db958800","contentHash":"169afb7bd3c6132bf0282713a5b70394871da5df5db202a65c2ffe29fa50bedd"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/starterPlate.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/starterPlate.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":17,"column":8},"end":{"line":17,"column":26}},"4":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":25}},"6":{"start":{"line":28,"column":0},"end":{"line":28,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":34},"end":{"line":19,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":23},"end":{"line":26,"column":5}},"line":24}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":7,"4":7,"5":7,"6":1},"f":{"0":7,"1":7},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/starterPlate.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/plate/starterPlate.ts"],"names":[],"mappings":";;;AAAA,mCAA2D;AAE3D;;;GAGG;AACH,MAAa,YAAa,SAAQ,aAAK;IACrC;;;;;OAKG;IACH,YAAY,IAAY,EAAE,IAAoB,EAAY,IAAmB;QAC3E,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QADsC,SAAI,GAAJ,IAAI,CAAe;IAE7E,CAAC;IAED;;;OAGG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;CACF;AAlBD,oCAkBC","sourcesContent":["import {Plate, plateCategory, foodInPlates} from \"./plate\";\r\n\r\n/**\r\n * Subclase que extiende de la clase padre plate que permite crear un objeto \r\n * que represente aquellos platos reconocidos como entrantes\r\n */\r\nexport class StarterPlate extends Plate {\r\n  /**\r\n   * Constructor de la clase:\r\n   * @param name Nombre del plato\r\n   * @param food Alimentos que componen el plato\r\n   * @param type Tipo de plato al que pertenece (Starter)\r\n   */\r\n  constructor(name: string, food: foodInPlates[], protected type: plateCategory) {\r\n    super(name, food);\r\n  }\r\n\r\n  /**\r\n   * Método que devuelve el tipo al que pertenece el plato\r\n   * @returns Tipo al que pertenece el plato\r\n   */\r\n  getPlateCategory(): plateCategory {\r\n    return this.type;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"936ba8c3f87fbc117c1507f81564018893c0aa0a","contentHash":"10c65db6256ae0e3be7d0e6a89f76306493f58d5be49acac81a51549b7c366be"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/menu.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/menu.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":22}},"2":{"start":{"line":17,"column":8},"end":{"line":17,"column":25}},"3":{"start":{"line":18,"column":8},"end":{"line":18,"column":29}},"4":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"5":{"start":{"line":20,"column":12},"end":{"line":20,"column":37}},"6":{"start":{"line":22,"column":8},"end":{"line":22,"column":43}},"7":{"start":{"line":23,"column":8},"end":{"line":23,"column":60}},"8":{"start":{"line":32,"column":8},"end":{"line":33,"column":25}},"9":{"start":{"line":33,"column":12},"end":{"line":33,"column":25}},"10":{"start":{"line":34,"column":20},"end":{"line":34,"column":22}},"11":{"start":{"line":35,"column":8},"end":{"line":37,"column":11}},"12":{"start":{"line":36,"column":12},"end":{"line":36,"column":51}},"13":{"start":{"line":38,"column":8},"end":{"line":40,"column":11}},"14":{"start":{"line":39,"column":12},"end":{"line":39,"column":48}},"15":{"start":{"line":41,"column":8},"end":{"line":42,"column":25}},"16":{"start":{"line":42,"column":12},"end":{"line":42,"column":25}},"17":{"start":{"line":43,"column":8},"end":{"line":43,"column":20}},"18":{"start":{"line":50,"column":21},"end":{"line":50,"column":22}},"19":{"start":{"line":51,"column":8},"end":{"line":53,"column":11}},"20":{"start":{"line":52,"column":12},"end":{"line":52,"column":41}},"21":{"start":{"line":54,"column":8},"end":{"line":54,"column":22}},"22":{"start":{"line":61,"column":23},"end":{"line":65,"column":9}},"23":{"start":{"line":66,"column":8},"end":{"line":70,"column":11}},"24":{"start":{"line":67,"column":12},"end":{"line":67,"column":86}},"25":{"start":{"line":68,"column":12},"end":{"line":68,"column":76}},"26":{"start":{"line":69,"column":12},"end":{"line":69,"column":72}},"27":{"start":{"line":71,"column":8},"end":{"line":71,"column":22}},"28":{"start":{"line":78,"column":8},"end":{"line":78,"column":32}},"29":{"start":{"line":79,"column":8},"end":{"line":79,"column":43}},"30":{"start":{"line":80,"column":8},"end":{"line":80,"column":60}},"31":{"start":{"line":87,"column":18},"end":{"line":87,"column":19}},"32":{"start":{"line":88,"column":8},"end":{"line":95,"column":11}},"33":{"start":{"line":89,"column":12},"end":{"line":94,"column":15}},"34":{"start":{"line":90,"column":16},"end":{"line":93,"column":17}},"35":{"start":{"line":91,"column":20},"end":{"line":91,"column":55}},"36":{"start":{"line":92,"column":20},"end":{"line":92,"column":47}},"37":{"start":{"line":103,"column":21},"end":{"line":103,"column":49}},"38":{"start":{"line":104,"column":8},"end":{"line":104,"column":59}},"39":{"start":{"line":105,"column":8},"end":{"line":107,"column":11}},"40":{"start":{"line":106,"column":12},"end":{"line":106,"column":55}},"41":{"start":{"line":108,"column":8},"end":{"line":111,"column":68}},"42":{"start":{"line":112,"column":8},"end":{"line":112,"column":28}},"43":{"start":{"line":119,"column":8},"end":{"line":119,"column":25}},"44":{"start":{"line":126,"column":8},"end":{"line":126,"column":26}},"45":{"start":{"line":133,"column":8},"end":{"line":133,"column":27}},"46":{"start":{"line":140,"column":8},"end":{"line":140,"column":35}},"47":{"start":{"line":147,"column":23},"end":{"line":147,"column":25}},"48":{"start":{"line":148,"column":8},"end":{"line":150,"column":11}},"49":{"start":{"line":149,"column":12},"end":{"line":149,"column":59}},"50":{"start":{"line":151,"column":8},"end":{"line":151,"column":22}},"51":{"start":{"line":154,"column":0},"end":{"line":154,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":30},"end":{"line":24,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":15},"end":{"line":44,"column":5}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":35,"column":28},"end":{"line":35,"column":29}},"loc":{"start":{"line":35,"column":47},"end":{"line":37,"column":9}},"line":35},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":29},"end":{"line":38,"column":30}},"loc":{"start":{"line":38,"column":58},"end":{"line":40,"column":9}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":21},"end":{"line":55,"column":5}},"line":49},"5":{"name":"(anonymous_5)","decl":{"start":{"line":51,"column":28},"end":{"line":51,"column":29}},"loc":{"start":{"line":51,"column":47},"end":{"line":53,"column":9}},"line":51},"6":{"name":"(anonymous_6)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":29},"end":{"line":72,"column":5}},"line":60},"7":{"name":"(anonymous_7)","decl":{"start":{"line":66,"column":28},"end":{"line":66,"column":29}},"loc":{"start":{"line":66,"column":47},"end":{"line":70,"column":9}},"line":66},"8":{"name":"(anonymous_8)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":20},"end":{"line":81,"column":5}},"line":77},"9":{"name":"(anonymous_9)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":32},"end":{"line":96,"column":5}},"line":86},"10":{"name":"(anonymous_10)","decl":{"start":{"line":88,"column":28},"end":{"line":88,"column":29}},"loc":{"start":{"line":88,"column":41},"end":{"line":95,"column":9}},"line":88},"11":{"name":"(anonymous_11)","decl":{"start":{"line":89,"column":35},"end":{"line":89,"column":36}},"loc":{"start":{"line":89,"column":45},"end":{"line":94,"column":13}},"line":89},"12":{"name":"(anonymous_12)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":16},"end":{"line":113,"column":5}},"line":102},"13":{"name":"(anonymous_13)","decl":{"start":{"line":105,"column":28},"end":{"line":105,"column":29}},"loc":{"start":{"line":105,"column":47},"end":{"line":107,"column":9}},"line":105},"14":{"name":"(anonymous_14)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":14},"end":{"line":120,"column":5}},"line":118},"15":{"name":"(anonymous_15)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":15},"end":{"line":127,"column":5}},"line":125},"16":{"name":"(anonymous_16)","decl":{"start":{"line":132,"column":4},"end":{"line":132,"column":5}},"loc":{"start":{"line":132,"column":16},"end":{"line":134,"column":5}},"line":132},"17":{"name":"(anonymous_17)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":32},"end":{"line":141,"column":5}},"line":139},"18":{"name":"(anonymous_18)","decl":{"start":{"line":146,"column":4},"end":{"line":146,"column":5}},"loc":{"start":{"line":146,"column":18},"end":{"line":152,"column":5}},"line":146},"19":{"name":"(anonymous_19)","decl":{"start":{"line":148,"column":28},"end":{"line":148,"column":29}},"loc":{"start":{"line":148,"column":47},"end":{"line":150,"column":9}},"line":148}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"1":{"loc":{"start":{"line":32,"column":8},"end":{"line":33,"column":25}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":33,"column":25}},{"start":{"line":32,"column":8},"end":{"line":33,"column":25}}],"line":32},"2":{"loc":{"start":{"line":41,"column":8},"end":{"line":42,"column":25}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":42,"column":25}},{"start":{"line":41,"column":8},"end":{"line":42,"column":25}}],"line":41},"3":{"loc":{"start":{"line":90,"column":16},"end":{"line":93,"column":17}},"type":"if","locations":[{"start":{"line":90,"column":16},"end":{"line":93,"column":17}},{"start":{"line":90,"column":16},"end":{"line":93,"column":17}}],"line":90}},"s":{"0":1,"1":1,"2":7,"3":7,"4":7,"5":2,"6":5,"7":5,"8":8,"9":1,"10":7,"11":7,"12":25,"13":7,"14":25,"15":7,"16":1,"17":6,"18":6,"19":6,"20":22,"21":6,"22":6,"23":6,"24":22,"25":22,"26":22,"27":6,"28":1,"29":1,"30":1,"31":1,"32":1,"33":3,"34":3,"35":1,"36":1,"37":1,"38":1,"39":1,"40":4,"41":1,"42":1,"43":3,"44":1,"45":3,"46":1,"47":1,"48":1,"49":4,"50":1,"51":1},"f":{"0":7,"1":8,"2":25,"3":25,"4":6,"5":22,"6":6,"7":22,"8":1,"9":1,"10":3,"11":3,"12":1,"13":4,"14":3,"15":1,"16":3,"17":1,"18":1,"19":4},"b":{"0":[2,5],"1":[1,7],"2":[1,6],"3":[1,2]},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/menu.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/menu.ts"],"names":[],"mappings":"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","sourcesContent":["import {macroNutrients, foodGroup} from './food/food';\r\nimport {Plate, plateCategory, PlateType} from './plate/plate';\r\n\r\n/**\r\n * Tipo de dato que define la informacion de un menu.\r\n * @param name contiene el nombre del menu.\r\n * @param macroNutrients macronutrientes del menu.\r\n * @param plates platos que conforman el menu.\r\n * @param price precio del menu.\r\n */\r\nexport type MenuType = {\r\n  name: string;\r\n  macroNutrients: macroNutrients;\r\n  plates: PlateType[];\r\n  price: number;\r\n}\r\n\r\n/**\r\n * La clase Menu permitirá crear menús en los que se podrán\r\n * añadir platos.\r\n * @param macroNutrients macronutrientes totales del menu\r\n * @param price precio total del menu\r\n */\r\nexport class Menu {\r\n  private macroNutrients: macroNutrients;\r\n  private price : number;\r\n\r\n  /**\r\n * Constructor de la clase, permitirá crear un objeto menú.\r\n * @param name nombre del menú\r\n * @param plates array de platos que conformarán el menú.\r\n */\r\n  constructor(private name : string, private plates: Plate[]) {\r\n    if (!this.validate()) {\r\n      throw new Error('ERROR');\r\n    }\r\n    this.price = this.calculatePrice();\r\n    this.macroNutrients = this.nutritionalComposition();\r\n  }\r\n\r\n  /**\r\n * Método que comprobará si el menú está compuesto por al menos\r\n * tres platos o al menos esta compuesto por un plato de cada categoría\r\n * (starter, first, second y dessert).\r\n * @returns si es valido o no\r\n */\r\n  validate(): boolean {\r\n    if (this.plates.length < 3) return false;\r\n\r\n    let group: plateCategory[] = [];\r\n    this.plates.forEach(function(element) {\r\n      group.push(element.getPlateCategory());\r\n    });\r\n\r\n    group = group.filter(function(elem, index, self) {\r\n      return index === self.indexOf(elem);\r\n    });\r\n\r\n    if (group.length < 3) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n * Calculará el precio del menún en función del precio de cada plato\r\n * @returns precio total del menú\r\n */\r\n  private calculatePrice(): number {\r\n    let result: number = 0;\r\n    this.plates.forEach(function(element: Plate) {\r\n      result += element.getPrice();\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Método que devolverá la información nutricional del menú\r\n   * @returns los valores macronutrientes del menú\r\n   */\r\n  private nutritionalComposition(): macroNutrients {\r\n    const result: macroNutrients = {\r\n      carboHydrates: 0,\r\n      proteins: 0,\r\n      lipids: 0,\r\n    };\r\n\r\n    this.plates.forEach(function(element: Plate) {\r\n      result.carboHydrates += element.getNutritionalComposition().carboHydrates;\r\n      result.proteins += element.getNutritionalComposition().proteins;\r\n      result.lipids += element.getNutritionalComposition().lipids;\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Método que permitirá añadir un plato al menú.\r\n   * @param plate plato a añadir.\r\n   */\r\n  addPlate(plate: Plate): void {\r\n    this.plates.push(plate);\r\n    this.price = this.calculatePrice();\r\n    this.macroNutrients = this.nutritionalComposition();\r\n  }\r\n\r\n  /**\r\n   * Método que permitirá eliminar un plato o más al menú.\r\n   * @param plate plato/s a eliminar.\r\n   */\r\n  deletePlate(platesToDelete: string[]) {\r\n    let pos: number = 0;\r\n    this.plates.forEach((element) => {\r\n      platesToDelete.forEach((item) => {\r\n        if (element.getName() === item) {\r\n          pos = this.plates.indexOf(element);\r\n          this.plates.splice(pos, 1);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Método que permitirá mostrar la información del menú.\r\n   * mostrando los platos que lo contiene así como la\r\n   * información nutricional del menú.\r\n   */\r\n  printMenu() {\r\n    let result: string = 'Menu: ' + this.name +'\\n ';\r\n    result += 'Price: ' + this.price + '\\n Plates: \\n';\r\n    this.plates.forEach(function(element) {\r\n      result += ' - ' + element.getName() + '\\n';\r\n    });\r\n    result += 'Nutritional composition: ' +\r\n    '\\n - Carbohydrates: ' + this.macroNutrients.carboHydrates +\r\n    '\\n - Lipids: ' + this.macroNutrients.lipids +\r\n    '\\n - Proteins: ' + this.macroNutrients.proteins + '\\n';\r\n\r\n    console.log(result);\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve el nombre del menu\r\n   * @returns nombre del menu\r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve el precio del menu\r\n   * @returns precio del menu\r\n   */\r\n  getPrice(): number {\r\n    return this.price;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve los platos disponibles en el menu\r\n   * @returns Conjunto de platos disponibles en el menu\r\n   */\r\n  getPlates(): Plate[] {\r\n    return this.plates;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve la composición nutricional del menu\r\n   * @returns Composición nutricional del manu\r\n   */\r\n  getNutritionalComposition(): macroNutrients {\r\n    return this.macroNutrients;\r\n  }\r\n\r\n  /**\r\n   * Método getter que devuelve el grupo de alimento predominante de cada plato del menu\r\n   * @returns Array con el grupo de alimento predominante de cada plato\r\n   */\r\n  getFoodList(): foodGroup[] {\r\n    const result: foodGroup[] = [];\r\n\r\n    this.plates.forEach(function(element: Plate) {\r\n      result.push(element.getPredominantGroupFood());\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cb2fd89e342aeba6dd9cfd84c443a012fdf12180","contentHash":"086fc86968e25e9b160c2ad705487dbe9247750042ef75622e89a6ec42aa4895"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/carte.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/carte.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":15,"column":8},"end":{"line":15,"column":25}},"3":{"start":{"line":16,"column":8},"end":{"line":16,"column":27}},"4":{"start":{"line":17,"column":8},"end":{"line":17,"column":29}},"5":{"start":{"line":24,"column":8},"end":{"line":24,"column":25}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":26}},"7":{"start":{"line":38,"column":8},"end":{"line":38,"column":27}},"8":{"start":{"line":41,"column":0},"end":{"line":41,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":37},"end":{"line":18,"column":5}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":14},"end":{"line":25,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":15},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":16},"end":{"line":39,"column":5}},"line":37}},"branchMap":{},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":3,"6":1,"7":1,"8":1},"f":{"0":3,"1":3,"2":1,"3":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/carte.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/carte.ts"],"names":[],"mappings":";;;AAeA;;GAEG;AACH,MAAa,KAAK;IAChB;;;;;OAKG;IACH,YAAoB,IAAY,EAAU,KAAa,EAC7C,MAAe;QADL,SAAI,GAAJ,IAAI,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAQ;QAC7C,WAAM,GAAN,MAAM,CAAS;IAAG,CAAC;IAE7B;;;OAGG;IACH,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;OAGG;IACH,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAjCD,sBAiCC","sourcesContent":["import {Plate, PlateType} from './plate/plate';\r\nimport {Menu, MenuType} from './menu';\r\n\r\n/**\r\n * Tipo de dato que define la informacion de una carta\r\n * @param name contiene el nombre de la carta\r\n * @param menu array de menús que conforman la carta\r\n * @param plates array de platos que conforman la carta\r\n */\r\nexport type CarteType = {\r\n  name: string;\r\n  menu: MenuType[];\r\n  plates: PlateType[];\r\n}\r\n\r\n/**\r\n * La clase Carta permitirá crear cartas en las que se podrán añadir menús y platos.\r\n */\r\nexport class Carte {\r\n  /**\r\n   * Constructor de la clase:\r\n   * @param name Nombre de la carta \r\n   * @param menus Conjunto de menus disponibles en la carta\r\n   * @param plates Conjunto de platos disponibles en la carta que no pertenecen a un menu\r\n   */\r\n  constructor(private name: string, private menus: Menu[],\r\n    private plates: Plate[]) {}\r\n\r\n  /**\r\n   * Método que retorna el nombre de la carta\r\n   * @returns Nombre de la carta \r\n   */\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  /**\r\n   * Método que retorna el conjunto de menus disponibles en la carta \r\n   * @returns Array con los menus disponibles\r\n   */\r\n  getMenus(): Menu[] {\r\n    return this.menus;\r\n  }\r\n\r\n  /**\r\n   * Método que retorna el conjunto de platos disponibles en la carta\r\n   * @returns Array con los platos disponibles \r\n   */\r\n  getPlates(): Plate[] {\r\n    return this.plates;\r\n  }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b032b105962ffca1a842fbe33ec54d240f06b6ab","contentHash":"9bffb7138f425bddcbf4f5c8121b2b367d678ed0fdb24c3d988d8db4e5437963"},"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/collection.ts":{"path":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/collection.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":32}},"4":{"start":{"line":6,"column":23},"end":{"line":6,"column":54}},"5":{"start":{"line":7,"column":21},"end":{"line":7,"column":50}},"6":{"start":{"line":8,"column":22},"end":{"line":8,"column":52}},"7":{"start":{"line":9,"column":23},"end":{"line":9,"column":54}},"8":{"start":{"line":24,"column":8},"end":{"line":24,"column":31}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":32}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":31}},"11":{"start":{"line":27,"column":8},"end":{"line":27,"column":32}},"12":{"start":{"line":34,"column":8},"end":{"line":34,"column":45}},"13":{"start":{"line":42,"column":8},"end":{"line":63,"column":9}},"14":{"start":{"line":43,"column":24},"end":{"line":43,"column":26}},"15":{"start":{"line":44,"column":12},"end":{"line":46,"column":15}},"16":{"start":{"line":45,"column":16},"end":{"line":45,"column":67}},"17":{"start":{"line":48,"column":12},"end":{"line":61,"column":13}},"18":{"start":{"line":50,"column":20},"end":{"line":50,"column":90}},"19":{"start":{"line":51,"column":20},"end":{"line":51,"column":26}},"20":{"start":{"line":53,"column":20},"end":{"line":53,"column":84}},"21":{"start":{"line":54,"column":20},"end":{"line":54,"column":26}},"22":{"start":{"line":56,"column":20},"end":{"line":56,"column":87}},"23":{"start":{"line":57,"column":20},"end":{"line":57,"column":26}},"24":{"start":{"line":59,"column":20},"end":{"line":59,"column":90}},"25":{"start":{"line":60,"column":20},"end":{"line":60,"column":26}},"26":{"start":{"line":62,"column":12},"end":{"line":62,"column":58}},"27":{"start":{"line":71,"column":23},"end":{"line":71,"column":25}},"28":{"start":{"line":72,"column":8},"end":{"line":74,"column":11}},"29":{"start":{"line":73,"column":12},"end":{"line":73,"column":50}},"30":{"start":{"line":75,"column":24},"end":{"line":75,"column":57}},"31":{"start":{"line":76,"column":8},"end":{"line":76,"column":51}},"32":{"start":{"line":85,"column":21},"end":{"line":85,"column":23}},"33":{"start":{"line":86,"column":22},"end":{"line":86,"column":24}},"34":{"start":{"line":87,"column":8},"end":{"line":89,"column":11}},"35":{"start":{"line":88,"column":12},"end":{"line":88,"column":47}},"36":{"start":{"line":90,"column":8},"end":{"line":92,"column":11}},"37":{"start":{"line":91,"column":12},"end":{"line":91,"column":49}},"38":{"start":{"line":93,"column":25},"end":{"line":93,"column":66}},"39":{"start":{"line":94,"column":8},"end":{"line":94,"column":54}},"40":{"start":{"line":101,"column":8},"end":{"line":101,"column":36}},"41":{"start":{"line":108,"column":8},"end":{"line":108,"column":38}},"42":{"start":{"line":115,"column":8},"end":{"line":115,"column":36}},"43":{"start":{"line":122,"column":8},"end":{"line":122,"column":38}},"44":{"start":{"line":129,"column":8},"end":{"line":129,"column":27}},"45":{"start":{"line":136,"column":8},"end":{"line":136,"column":26}},"46":{"start":{"line":143,"column":8},"end":{"line":143,"column":40}},"47":{"start":{"line":150,"column":8},"end":{"line":150,"column":41}},"48":{"start":{"line":157,"column":8},"end":{"line":157,"column":40}},"49":{"start":{"line":164,"column":8},"end":{"line":164,"column":41}},"50":{"start":{"line":167,"column":0},"end":{"line":167,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":28,"column":5}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":18},"end":{"line":35,"column":5}},"line":33},"2":{"name":"(anonymous_2)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":42},"end":{"line":64,"column":5}},"line":41},"3":{"name":"(anonymous_3)","decl":{"start":{"line":44,"column":26},"end":{"line":44,"column":27}},"loc":{"start":{"line":44,"column":39},"end":{"line":46,"column":13}},"line":44},"4":{"name":"(anonymous_4)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":34},"end":{"line":77,"column":5}},"line":70},"5":{"name":"(anonymous_5)","decl":{"start":{"line":72,"column":27},"end":{"line":72,"column":28}},"loc":{"start":{"line":72,"column":40},"end":{"line":74,"column":9}},"line":72},"6":{"name":"(anonymous_6)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":45},"end":{"line":95,"column":5}},"line":84},"7":{"name":"(anonymous_7)","decl":{"start":{"line":87,"column":25},"end":{"line":87,"column":26}},"loc":{"start":{"line":87,"column":38},"end":{"line":89,"column":9}},"line":87},"8":{"name":"(anonymous_8)","decl":{"start":{"line":90,"column":26},"end":{"line":90,"column":27}},"loc":{"start":{"line":90,"column":39},"end":{"line":92,"column":9}},"line":90},"9":{"name":"(anonymous_9)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":25},"end":{"line":102,"column":5}},"line":100},"10":{"name":"(anonymous_10)","decl":{"start":{"line":107,"column":4},"end":{"line":107,"column":5}},"loc":{"start":{"line":107,"column":27},"end":{"line":109,"column":5}},"line":107},"11":{"name":"(anonymous_11)","decl":{"start":{"line":114,"column":4},"end":{"line":114,"column":5}},"loc":{"start":{"line":114,"column":25},"end":{"line":116,"column":5}},"line":114},"12":{"name":"(anonymous_12)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":27},"end":{"line":123,"column":5}},"line":121},"13":{"name":"(anonymous_13)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":18},"end":{"line":130,"column":5}},"line":128},"14":{"name":"(anonymous_14)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":17},"end":{"line":137,"column":5}},"line":135},"15":{"name":"(anonymous_15)","decl":{"start":{"line":142,"column":4},"end":{"line":142,"column":5}},"loc":{"start":{"line":142,"column":15},"end":{"line":144,"column":5}},"line":142},"16":{"name":"(anonymous_16)","decl":{"start":{"line":149,"column":4},"end":{"line":149,"column":5}},"loc":{"start":{"line":149,"column":16},"end":{"line":151,"column":5}},"line":149},"17":{"name":"(anonymous_17)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":15},"end":{"line":158,"column":5}},"line":156},"18":{"name":"(anonymous_18)","decl":{"start":{"line":163,"column":4},"end":{"line":163,"column":5}},"loc":{"start":{"line":163,"column":16},"end":{"line":165,"column":5}},"line":163}},"branchMap":{"0":{"loc":{"start":{"line":42,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":63,"column":9}},{"start":{"line":42,"column":8},"end":{"line":63,"column":9}}],"line":42},"1":{"loc":{"start":{"line":48,"column":12},"end":{"line":61,"column":13}},"type":"switch","locations":[{"start":{"line":49,"column":16},"end":{"line":51,"column":26}},{"start":{"line":52,"column":16},"end":{"line":54,"column":26}},{"start":{"line":55,"column":16},"end":{"line":57,"column":26}},{"start":{"line":58,"column":16},"end":{"line":60,"column":26}}],"line":48}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":10,"13":5,"14":4,"15":4,"16":11,"17":4,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":4,"27":1,"28":1,"29":3,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":3,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":2,"45":2,"46":2,"47":2,"48":2,"49":2,"50":1},"f":{"0":1,"1":10,"2":5,"3":11,"4":1,"5":3,"6":1,"7":1,"8":3,"9":1,"10":1,"11":1,"12":1,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2},"b":{"0":[4,1],"1":[1,1,1,1]},"inputSourceMap":{"version":3,"file":"/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/collection.ts","sources":["/home/usuario/ull-esit-inf-dsi-20-21-prct07-menu-datamodel-grupo-h/src/collection.ts"],"names":[],"mappings":"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","sourcesContent":["import {Food} from './food/food';\r\nimport {Carte} from './carte';\r\nimport {Menu} from './menu';\r\nimport {foodInPlates, Plate, plateCategory} from './plate/plate';\r\nimport {StarterPlate} from './plate/starterPlate';\r\nimport {FirstPlate} from './plate/firstPlate';\r\nimport {SecondPlate} from './plate/secondPlate';\r\nimport {DessertPlate} from './plate/dessertPlate';\r\n\r\n/**\r\n * Clase collection, en ella se permite almacenar alimentos con sus nombres, \r\n * platos con sus nombres, menus con sus nombres y cartas con sus nombres.\r\n * @param foods map que guardará alimentos con sus nombres identificativos.\r\n * @param plates map que guardará plates con sus nombres identificativos.\r\n * @param menus map que guardará menus con sus nombres identificativos.\r\n * @param cartas map que guardará cartas con sus nombres identificativos.\r\n */\r\nexport class Collection {\r\n    protected foods: Map<string, Food>;\r\n    protected plates: Map<string, Plate>;\r\n    protected menus: Map<string, Menu>;\r\n    protected cartes: Map<string, Carte>;\r\n\r\n    /**\r\n   * Constructor de la clase que permitirá añadir alimentos, platos, menús\r\n   * y cartas para su almacenamiento.\r\n   */\r\n    constructor() {\r\n      this.foods = new Map<string, Food>();\r\n      this.plates = new Map<string, Plate>();\r\n      this.menus = new Map<string, Menu>();\r\n      this.cartes = new Map<string, Carte>();\r\n    }\r\n\r\n    /**\r\n     * Método que permitirá añadir alimentos para su almacenamiento\r\n     * @param food alimento a guardar\r\n     */\r\n    addFood(food: Food) {\r\n      this.foods.set(food.getName(), food);\r\n    }\r\n\r\n    /**\r\n     * Método que permitirá añadir platos para su almacenamiento\r\n     * @param plateName nombre del plato a almacenar\r\n     * @param plate plato a almacenar\r\n     */\r\n    addPlate(plateName: string, plate: [string, number][], plateType: plateCategory) {\r\n      if (!this.plates.has(plateName)) {\r\n        const aux: foodInPlates[] = [];\r\n        plate.forEach((element) => {\r\n          aux.push([this.foods.get(element[0]) as Food, element[1]]);\r\n        });\r\n        let plateAux: Plate;\r\n        switch (plateType) {\r\n          case 'Starter':\r\n            plateAux = new StarterPlate(plateName, aux, 'Starter');\r\n            break;\r\n          case 'First':\r\n            plateAux = new FirstPlate(plateName, aux, 'First');\r\n            break;\r\n          case 'Second':\r\n            plateAux = new SecondPlate(plateName, aux, 'Second');\r\n            break;\r\n          case 'Dessert':\r\n            plateAux = new DessertPlate(plateName, aux, 'Dessert');\r\n            break;\r\n        }\r\n        this.plates.set(plateAux.getName(), plateAux);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Método que permite añadir un menú a la colección\r\n     * @param menuName Nombre del menu\r\n     * @param platesName Array con el numbre de los platos de ese menú\r\n     */\r\n    addMenu(menuName: string, platesName: string[]) {\r\n      const plates: Plate[] = [];\r\n      platesName.forEach((element) => {\r\n        plates.push(this.plates.get(element) as Plate);\r\n      });\r\n      const menuAux = new Menu(menuName, plates);\r\n      this.menus.set(menuAux.getName(), menuAux);\r\n    }\r\n\r\n    /**\r\n     * Método que permite añadir una carta a la colección\r\n     * @param nameCarte Nombre de la carta\r\n     * @param menuList Array con el numbre de los menús de esa carta\r\n     * @param plateList Array con el numbre de los platos de esa carta\r\n     */\r\n    addCarte(nameCarte: string, menuList: string[], plateList: string[]) {\r\n      const menu: Menu[] = [];\r\n      const plate: Plate[] = [];\r\n      menuList.forEach((element) => {\r\n        menu.push(this.menus.get(element) as Menu);\r\n      });\r\n      plateList.forEach((element) => {\r\n        plate.push(this.plates.get(element) as Plate);\r\n      });\r\n\r\n      const carteAux = new Carte(nameCarte, menu, plate);\r\n\r\n      this.cartes.set(carteAux.getName(), carteAux);\r\n    }\r\n\r\n    /**\r\n     * Metodo que permite eliminar un alimento de la colección\r\n     * @param foodName Nombre del alimento\r\n     */\r\n    deleteFood(foodName: string) {\r\n      this.foods.delete(foodName);\r\n    }\r\n\r\n    /**\r\n     * Metodo que permite eliminar un plato de la colección\r\n     * @param plateName Nombre del plato\r\n     */\r\n    deletePlate(plateName: string) {\r\n      this.plates.delete(plateName);\r\n    }\r\n\r\n    /**\r\n     * Metodo que permite eliminar un menú de la colección\r\n     * @param menuName Nombre del menú\r\n     */\r\n    deleteMenu(menuName: string) {\r\n      this.menus.delete(menuName);\r\n    }\r\n\r\n    /**\r\n     * Metodo que permite eliminar una carta de la colección\r\n     * @param menuName Nombre del carta\r\n     */\r\n    deleteCarte(carteName: string) {\r\n      this.cartes.delete(carteName);\r\n    }\r\n\r\n    /**\r\n     * Método getter que devuelve los platos almacenados\r\n     * @returns los platos almacenados junto con su nombre identificativo.\r\n     */\r\n    getPlateMap(): Map<string, Plate> {\r\n      return this.plates;\r\n    }\r\n\r\n    /**\r\n     * Método getter que devuelve los menús almacenados\r\n     * @returns los menús almacenados junto con su nombre identificativo.\r\n     */\r\n    getMenuMap(): Map<string, Menu> {\r\n      return this.menus;\r\n    }\r\n\r\n    /**\r\n     * Método getter que devuelve los alimentos almacenados\r\n     * @returns los alimentos almacenados en el map.\r\n     */\r\n    getFoods(): Food[] {\r\n      return [...this.foods.values()];\r\n    }\r\n\r\n    /**\r\n     * Método que devuelve los platos que han sido almacenados\r\n     * @returns platos almacenados en el map.\r\n     */\r\n    getPlates(): Plate[] {\r\n      return [...this.plates.values()];\r\n    }\r\n\r\n    /**\r\n     * Método que devuelve los menús que han sido almacenados\r\n     * @returns menús almacenados en el map.\r\n     */\r\n    getMenus(): Menu[] {\r\n      return [...this.menus.values()];\r\n    }\r\n\r\n    /**\r\n     * Método que devuelve las cartas que han sido almacenadas\r\n     * @returns cartas almacenadas en el map.\r\n     */\r\n    getCartes(): Carte[] {\r\n      return [...this.cartes.values()];\r\n    }\r\n}\r\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c1acf5a7474b0a8328f2db958b1f4f4872b9730f","contentHash":"f3fcea838d4273cc42a527204deeb6369d9767d5c216f0a7cbf1c8adeed73e44"}}